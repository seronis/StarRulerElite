//Keyword: specifies an entry for the current system
//If the keyword isn't an internal keyword, it's treated as a special variable that can be accessed by scripts
//	Note: When the keyword is a user-defined type as above, it must be a valid formula

//Average density is 50 per size unit


System: Colonizer
	Name: #SS_COLONIZER_NAME
	Description: #SS_COLONIZER_DESC
	Appearance: ColonyModule	
	Explosion: armor_explode lasting 0.25

	Tags: Colonizer, Tool, Tool:Colonizer, Order:Colonize
	Tied To: ShipSystems 1
	
	Available: Techs.ShipSystems.Level > 0
	Level: Techs.ShipSystems.Level
	Size: max(Scale,15)
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: HEALTH_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 80 * Size
	
	Costs: Metals[50 * Size], Electronics[12 * Size], AdvParts[12 * Size]
	Complexity: 1.5
	
	Tick Rate: 4
	
	Provides: TakePlanet
	Provides: MakeStructures with Amount[Size / 15]

	Consumes:
		To Run: Air[5 * Size * 0.99]
	
	Hints: Local/AddStructs[floor(Size / 15)], Colony Size[(floor(Size / 15)]


System: Salvager
	Name: #SS_SALVAGER_NAME
	Description: #SS_SALVAGER_DESC
	Appearance: Salvager
	Explosion: electrical_spark lasting 0.25
	
	Tags: Salvager, Tool, Work:Salvager, Tool:Salvager, Deposit:Metals, TimedReload
	Tied To: Materials 2
	
	Available: Techs.Materials.Level > 1
	Level: Techs.Materials.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: HEALTH_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 80 * Size
	
	Costs: Metals[50 * Size], Electronics[50 * Size], AdvParts[75 * Size]
	Complexity: 2.5
	
	Tick Rate: 10
	
	Provides: Salvager with Rate[Size * 10 * pow(LEVEL_GAIN_CURVE, Level)], Factor[1 - (0.75 * decay(pow(LEVEL_GAIN_CURVE,Level), 12))], Delay[10], Duration[5]

	Requires:
		To Run:
			Control[10 * Size]

	Hints: Salvage[(Size * 10 * pow(LEVEL_GAIN_CURVE, Level) * 5)/10]


System: Analyzer
	Name: #SS_ANALYZER_NAME
	Description: #SS_ANALYZER_DESC
	Appearance: Analyzer
	Explosion: electrical_spark lasting 0.5
	
	Tags: Anaylzer, Tool, Work:Analyzer, Tool:Analyzer, TimedReload
	Tied To: Science 1, Sensors 0
	
	Available: (Techs.Science.Level > 0)
	Level: ceil(weight(Techs.Science.Level,0.25, Techs.Sensors.Level, 0.75))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: HEALTH_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 60 * Size
	
	Costs: Metals[40 * Size], Electronics[75 * Size], AdvParts[100 * Size]
	Complexity: 2.5
	
	Tick Rate: 10
	
	vSizeImpact: 0.5 + (0.5 * Object.Scale/Scale)
	vTechImpact: if(Techs.Sensors.Level > 0, 1, 0.5)
	vLevelImpact: 0.48 * (1 - decay(pow(LEVEL_GAIN_CURVE, Level),150))
	
	vAnalyzeChance: vTechImpact * ( 0.02 + vLevelImpact )^vSizeImpact
	vPowCost: Size * 15 * decay(pow(LEVEL_GAIN_CURVE,Level),125)
	
	Provides: Analyzer with ScanQuality[vAnalyzeChance], PowCost[vPowCost], Delay[10], Duration[5], Range[35 + pow(Object.Size,0.3)]

	Requires:
		To Run:
			Control[30 * Size]
	
	Hints: Local/AnalysisChance[100 * (1 - (1 - vAnalyzeChance)^5)], Power[-1 * vPowCost * 5 / 10]


System: JumpDrive
	Name: #SS_JUMPDRIVE_NAME
	Description: #SS_JUMPDRIVE_DESC
	Appearance: Jumpdrive
	Explosion: antimatter_boom_heavy centered lasting 1.0
	
	Tags: Jump Drive, Tool:Jump Drive, TimedReload
	Tied To: WarpPhysics 5
	
	Available: (Techs.WarpPhysics.Level > 4) || Traits.start_jumpdrives
	realLevel: Techs.WarpPhysics.Level - 4
	Level: if(Traits.start_jumpdrives, max(Techs.WarpPhysics.Level - 4, 3), Techs.WarpPhysics.Level - 4)
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: HEALTH_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 300 * Size
	
	Costs: Metals[250 * Size], Electronics[250 * Size], AdvParts[250 * Size]
	Complexity: 2.5
	
	vJumpRangeMin: 1000 * decay(Level, 250)
	vJumpRange: progress(5000 + (Size * 50),1000 + (Size * 10), pow(LEVEL_GAIN_CURVE, Level)) * sqrt(Scale / Object.Scale)
	vChargeTime: 8 * decay(pow(LEVEL_GAIN_CURVE, Level),250)
	vPowCost: 100 * Size

	Provides: DestructsShip
	
	Provides: JumpDrive with MinRange[vJumpRangeMin], MaxRange[vJumpRange],
		ChargeupTime[vChargeTime], PowCost[vPowCost]

	Requires:
		To Run:
			Control[50 * Size]
	
	Hints: Power[-1 * vPowCost], Local/ChargeTime[vChargeTime], Local/JumpMinDist[vJumpRangeMin / 1000], Local/JumpMaxDist[vJumpRange / 1000]



